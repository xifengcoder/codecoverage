apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.5.201505241946"
}

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.yxf.codecoveragetest"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"

    productFlavors {
        arm {
            dimension "version"
        }

        dev {
            dimension "version"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation('com.facebook.stetho:stetho-okhttp3:1.4.2') {
        exclude group: 'com.squareup.okhttp3'
    }

    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.squareup.wire:wire-runtime:2.2.0'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.0.5'
    implementation 'com.getkeepsafe.relinker:relinker:1.3.0'

    implementation 'org.jetbrains:annotations:13.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'

    androidTestImplementation('com.android.support.test:runner:1.0.2') {
        exclude module: 'support-annotations'
    }
    androidTestImplementation('com.android.support.test:rules:1.0.2') {
        exclude module: 'support-annotations'
    }

    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.2') {
        exclude module: 'support-annotations'
    }
}

project.afterEvaluate {
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "jacoco${sourceName.capitalize()}TestReport"

            // Create coverage task of 'jacocoArmDebugTestReport
            task "${testTaskName}" (type:JacocoReport) {  task ->
                doLast {
                    println "task: " + task.name + ", productFlavorName: " + productFlavorName + ", buildTypeName: " + buildTypeName
                }

                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                classDirectories = fileTree(
                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: ['**/R.class',
                                   '**/R$*.class',
                                   '**/*$ViewInjector*.*',
                                   '**/*$ViewBinder*.*',
                                   '**/BuildConfig.*',
                                   '**/Manifest*.*']
                )

                def coverageSourceDirs = [
                        "app/src/main/java",
                        "app/src/$productFlavorName/java",
                        "app/src/$buildTypeName/java"
                ]
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)

                executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}
